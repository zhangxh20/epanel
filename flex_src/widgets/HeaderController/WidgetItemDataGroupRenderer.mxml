<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:HeaderController="widgets.HeaderController.*"
				autoDrawBackground="false" buttonMode="true"
				click="itemrenderer_clickHandler(event)" creationComplete="init()"
				dataChange="itemrenderer_dataChangeHandler(event)" useHandCursor="true">

	<fx:Declarations>
		<s:Move3D id="moveEffect" duration="200" effectEnd="moveEffect_effectEndHandler(event)"
				  repeatBehavior="reverse" repeatCount="2" target="{icon}" yBy="-8" yFrom="0"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.esri.viewer.AppEvent;
			import com.gokei.components.EventType;
			
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.graphics.BitmapScaleMode;
			import mx.resources.ResourceManager;
			
			import spark.components.Label;
			import spark.effects.AnimateFilter;
			import spark.effects.animation.MotionPath;
			import spark.effects.animation.SimpleMotionPath;
			import spark.filters.GlowFilter;

			private const WIDGET_ITEM_CLICK:String = "widgetItemClick";
			private const WIDGET_ITEM_MOUSE_OVER:String = "widgetItemMouseOver";
			private const WIDGET_ITEM_MOUSE_OUT:String = "widgetItemMouseOut";

			[Bindable]
			private var widgetItem:WidgetItem;
			private var animate:AnimateFilter;
			private var num:Label;
			
			private function init():void {
				var item:WidgetItem = this.data as WidgetItem;
				if (item.id == 0) {
					//告警
					createMotion();
					AppEvent.addListener(EventType.ALARM_ANIMATE,alarm);
				} else if (item.id == 1) {
					//配线单
					createMotionX();
					AppEvent.addListener(EventType.WIRING_NUM,sheet);
				} else if (item.id == 2) {
					//工作单
					createMotionX();
					AppEvent.addListener(EventType.WORK_NUM,sheet);
				}
			}
			
			private function createMotion():void {
				ca.removeAllElements();
				num = new Label();
				num.text = "";
				num.setStyle("color",0xffffff);
				num.setStyle("fontSize","13");
//				num.setStyle("fontFamily","黑体");
				num.setStyle("fontFamily",ResourceManager.getInstance().getString("ViewerStrings","Font001"));
				num.setStyle("fontWeight","bold");
				num.x = 23;
				num.y = 3;
				animate = new AnimateFilter();
				animate.repeatCount = 0;
				animate.duration = 300;
				animate.repeatBehavior = "reverse";
				var glowFilter:GlowFilter = new GlowFilter();
				glowFilter.blurX = 15;
				glowFilter.blurY = 15;
				glowFilter.color = 0xff0000;
				glowFilter.alpha = 0.5;
				glowFilter.strength = 3;
				animate.bitmapFilter = glowFilter;
				var vector:Vector.<MotionPath> = new Vector.<MotionPath>();
				var motion:SimpleMotionPath = new SimpleMotionPath();
				motion.property = "alpha";
				motion.valueFrom = 0;
				motion.valueTo = 1;
				vector.push(motion);
				animate.motionPaths = vector;
			}
			
			private function createMotionX():void {
				ca.removeAllElements();
				num = new Label();
				num.text = "";
				num.setStyle("fontSize","13");
//				num.setStyle("fontFamily","黑体");
				num.setStyle("fontFamily",ResourceManager.getInstance().getString("ViewerStrings","Font001"));
				num.setStyle("fontWeight","bold");
				num.x = 23;
				num.y = 3;
				num.setStyle("color",0xffffff);
			}
			
			private function alarm(event:AppEvent):void {
				ca.removeAllElements();
				var n : int = int(event.data)
				if(n > 0){
					num.text = "" + n;
					var image : spark.components.Image = new spark.components.Image();
					image.scaleMode = BitmapScaleMode.STRETCH;
					image.smooth = true;
					if (n < 10){
						image.source = 'assets/images/number4.png';
						image.width = 18;
					} else if (n > 9 && n < 100) {
						image.source = 'assets/images/number3.png';
						image.width = 25;
					} else {						
						image.source = 'assets/images/number3.png';
						image.width = 32;
					}
					image.height = 18;
					image.x = 17;
					image.y = 0;
					ca.addElement(image);
					ca.addElement(num);
					animate.targets = [icon];
					moveEffect.targets = [ca,icon];
					animate.stop();
					animate.play();
				}else{
					animate.stop();
				}
			}
			
			private function sheet(event:AppEvent):void {
				ca.removeAllElements();
				var n:int = int(event.data);
				//处理工作单 配线单 的总条数 显示在item上
				if (n > 0){
					num.text = "" + n;
					var image : spark.components.Image = new spark.components.Image();
					image.scaleMode = BitmapScaleMode.STRETCH;
					image.smooth = true;
					if (n < 10){
						image.source = 'assets/images/number2.png';
						image.width = 18;
					} else if (n > 9 && n < 100) {
						image.source = 'assets/images/number1.png';
						image.width = 25;
					} else {						
						image.source = 'assets/images/number1.png';
						image.width = 32;
					}
					image.height = 18;
					image.x = 17;
					image.y = 0;
					ca.addElement(image);
					ca.addElement(num);
					moveEffect.targets = [icon,ca];
				}
			}

			private function itemrenderer_dataChangeHandler(event:FlexEvent):void
			{
				widgetItem = data as WidgetItem;

				icon.source = widgetItem.icon;
				underline.widgetOpen = widgetItem.open;
			}

			private function mouseOutHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OUT, true)); // bubbles
			}

			private function mouseOverHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OVER, true)); // bubbles
			}

			private function itemrenderer_clickHandler(event:MouseEvent):void
			{
				if (!WidgetItem(data).open)
				{
					moveEffect.end();
					moveEffect.play();
				}
				dispatchEvent(new Event(WIDGET_ITEM_CLICK, true)); // bubbles
			}

			private function moveEffect_effectEndHandler(event:EffectEvent):void
			{
				var item:WidgetItem = this.data as WidgetItem;
				// 告警闪烁消失
				if (item.id == 0 && animate) {
					animate.stop();
				}
				
			}
		]]>
	</fx:Script>

	<s:VGroup width="35" height="38" gap="2" horizontalAlign="center" verticalAlign="middle">
		<s:Group width="35" height="35">
			<mx:Image id="icon" width="100%" height="100%" buttonMode="true"
					  mouseOut="mouseOutHandler(event)" mouseOver="mouseOverHandler(event)"
					  smoothBitmapContent="true" useHandCursor="true"/>
			<s:Group id="ca" width="100%" height="100%"/>
		</s:Group>
		<HeaderController:WidgetUnderline id="underline"/>
	</s:VGroup>

</s:ItemRenderer>
