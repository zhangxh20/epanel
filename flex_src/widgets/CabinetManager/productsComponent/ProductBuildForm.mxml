<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012 GOKEI. All Rights Reserved.
//
// 设备安装
//
// @Author zhang
// @Version v1.0
// @Date 2012-12
///////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:gokei="widgets.CabinetManager.productsComponent.*"
		  width="800" height="100%" creationComplete="init()" layoutDirection="ltr">
	<fx:Declarations>
		<s:RemoteObject id="dataRemote" destination="assetsService" fault="onFault(event)">
			<s:method name="getAssetsInfoByObjectTypeId" result="getDataListResult(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="asRemote" destination="areaService" fault="onFault(event)">
			<s:method name="getAllAreasByBuildingId" result="getAreas(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="bgRemote" destination="backgroundService" fault="onFault(event)">
			<s:method name="getEmptyuNos" result="getAreas(event)"/>
			<s:method name="addEquipmentToCabinet" result="addResult(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="cabinetRemote" destination="cabinetService" fault="onFault(event)">
			<s:method name="addCabinet" result="addResult(event)"/>
			<s:method name="getLevelShelvesByCabinetId" result="getLevelShelves(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="portRemote" destination="portService" fault="onFault(event)"> 
			<s:method name="getSpotPortsByLvlShelfId" result="getSpot(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="terminalRemote" destination="terminalService" fault="onFault(event)">
			<s:method name="addTerminal" result="addTerminalResult(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("ViewerStrings")]  
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.esri.viewer.AppEvent;
			import com.gokei.components.EventType;
			import com.gokei.util.CommonUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.resources.ResourceManager;
			
			import spark.components.gridClasses.GridColumn;
			
			[Bindable]
			public var datasource:ArrayCollection = new ArrayCollection([]);
			[Bindable]
			public var typeSelect:TypeSelectBox;
			[Bindable]
			private var midType:String;// 中分类ID
			[Bindable]
			private var isCabinet:Boolean;
			
			public var isUplinkCab:Boolean;
			
			private var treeSelect:NetTreeSelect;//网络树形图
			
			private var shelfSelect:ShelfSelect;
			
			private var parentId:int = -1;
			
			private var bid:int = -1;
			
			private var shelfId:int = -1;
			
			private var parentCabinetId:int = 0;
			[Bindable]
			private var showShelfType:Boolean;
			[Bindable]
			private var showIpPswd:Boolean;
			[Bindable]
			private var showCabCode:Boolean;
			[Bindable]
			private var showPortNum:Boolean;
			[Bindable]
			private var shelfType:ArrayCollection = new ArrayCollection([
//				{name:"主干",id:0},
//				{name:"水平",id:1},
//				{name:"交换机",id:2}
				{name:ResourceManager.getInstance().getString("ViewerStrings","T00149"),id:0},
				{name:ResourceManager.getInstance().getString("ViewerStrings","T00150"),id:1},
				{name:ResourceManager.getInstance().getString("ViewerStrings","T00151"),id:2}
			]);
			[Bindable]
			private var cabTypeArr:ArrayCollection = new ArrayCollection([
//				{name:"分",id:0},
//				{name:"主",id:1}
				{name:ResourceManager.getInstance().getString("ViewerStrings","T00121"),id:0},
				{name:ResourceManager.getInstance().getString("ViewerStrings","T00120"),id:1}
			]);
			private var labelArr:ArrayCollection ;
			
			private function init():void{
				treeSelect = new NetTreeSelect();
				shelfSelect = new ShelfSelect();
				treeSelect.selectObj = 0;
				shelfSelect.productBuild = this;
				dg.addEventListener(ProductGridEvent.ITEM_BUILD,itemBuild);
				AppEvent.addListener(EventType.MIDTYPE_CHANGE_BUILD,midTypeChangeBuild);
				AppEvent.addListener(EventType.PRODUCT_REFRESH,function ():void {
					typeSelect.bigType.dispatchEvent(new Event(Event.CHANGE));
				});
				typeSelect.bigType.dispatchEvent(new Event(Event.CHANGE));
				AppEvent.addListener(EventType.UP_LINK_SELECT,function(event:AppEvent):void{
					upLinkSelect(event.data);
				});
				AppEvent.addListener(EventType.REFRESH,refresh);
			}
			
			private function refresh(event:AppEvent):void{
				var arr:Array = event.data.arr as Array;
				for each ( var item:String in arr) {
					if (EventType.REFRESH_ID[24] == item){
						if(parentId != -1){
							asRemote.getAllAreasByBuildingId(parentId);
						}
						break ;
					}
				}
			}
			
			private function midTypeChangeBuild(event:AppEvent):void {
				midType = event.data as String;
				selParentBt.setStyle("fontSize",10);
//				selParentBt.text = "点击选择";
				selParentBt.text = ResourceManager.getInstance().getString("ViewerStrings","I00065");
				selParentBtCab.setStyle("fontSize",10);
//				selParentBtCab.text = "点击选择";
				selParentBtCab.text = ResourceManager.getInstance().getString("ViewerStrings","I00065");
				parentId = -1;
				var typeValue:String = typeSelect.bigType.selectedValue as String;
				currentState = typeValue == "terminal" ? "terminal":"other";
				showPortNum = typeValue == "terminal" ? true : false;
				showShelfType = typeValue == "smartShelf" || typeValue == "shelf" ? true : false;
				showIpPswd = typeValue == "netEqmt" ? true : false;
				showCabCode = typeValue == "cabinet" ? true : false;
//				parentName.text = typeValue == "cabinet" ? "建筑选择" : "机柜选择";
				parentName.text = typeValue == "cabinet" ? ResourceManager.getInstance().getString("ViewerStrings","T00152") : ResourceManager.getInstance().getString("ViewerStrings","T00153");
				isCabinet = typeSelect.bigType.selectedValue == "cabinet" ? true : false;
				treeSelect.isCabinet = isCabinet;
				if (isCabinet) {
//					floor.text = "楼层/区域";
					floor.text = ResourceManager.getInstance().getString("ViewerStrings","T00154");
					floor.width = 60;
				} else {
//					floor.text = "所在U层";
					floor.text = ResourceManager.getInstance().getString("ViewerStrings","T00085");
					floor.width = 50;
				}
				uNumCombox.dataProvider = new ArrayCollection([]);
				editArea.enabled = false;
				// 关掉网络树形图选择
				PopUpManager.removePopUp(treeSelect);
				dataRemote.getAssetsInfoByObjectTypeId(midType);
				//----------------清空------
				uNumCombox.dataProvider = null;
				ip.text = "";
				password.text = "";
				shelf.text = "";
				portNo.dataProvider = null;
				cabinetCode.text = "";
				parentCabinetId = 0;
			}
			
			private var alertShow : int = 0 ; //超时 加密狗
			private function onFault(event:FaultEvent):void {
				if(alertShow == 0){
					alertShow = 1;
					var str : String = event.fault.faultString;
					if(str == 'LoginSecDogNotFound' || str == 'FilterSecDogNotFound'){
//						Alert.show("请插入加密狗！","提示");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00002"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
					}else if(str == 'NoAuth'){
//						Alert.show("没有权限！","提示");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00003"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
					}else if(str == 'SessionTimeOut'){
//						Alert.show("登录超时，请重新登录！","提示",Alert.OK,null,function(event : CloseEvent):void{
							Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00004"),ResourceManager.getInstance().getString("ViewerStrings","T00001"),Alert.OK,null,function(event : CloseEvent):void{
							AppEvent.dispatch(EventType.USER_LOGOUT,'logout');
						});
					}else if (str == 'dataVersionError'){
//						Alert.show("操作失败！","提示");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00005"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
					}else{
						Alert.show(event.fault.message);
						alertShow = 0 ;
					}
				}
			}
			
			private function getDataListResult(event:ResultEvent):void{
				var datalist:ArrayCollection = event.result as ArrayCollection;
				var viewList:ArrayCollection = new ArrayCollection([]);
				var cols:ArrayList  = new ArrayList();
				var col0:GridColumn = new GridColumn();
				col0.dataField = "serialID";
				col0.headerText = "";
				col0.width=30;
				cols.addItem(col0);
				var col1:GridColumn = new GridColumn();
				col1.dataField = "image";
//				col1.headerText = "缩略图";
				col1.headerText = ResourceManager.getInstance().getString("ViewerStrings","T00147");
				col1.width = 60;
				cols.addItem(col1);
				var col2:GridColumn = new GridColumn();
				col2.dataField = "name";
//				col2.headerText = "名称";
				col2.headerText = ResourceManager.getInstance().getString("ViewerStrings","C00002");
				cols.addItem(col2);
				var col3:GridColumn = new GridColumn();
				col3.dataField = "brand";
//				col3.headerText = "品牌";
				col3.headerText = ResourceManager.getInstance().getString("ViewerStrings","T00082");
				cols.addItem(col3);
				var col4:GridColumn = new GridColumn();
				col4.dataField = "model";
//				col4.headerText = "型号";
				col4.headerText = ResourceManager.getInstance().getString("ViewerStrings","C00003");
				cols.addItem(col4);
				if(datalist.length > 0) {
					for (var k:int = 0; k < datalist[0].assetsSpecInfoList.length; k++) {
						var col:GridColumn = new GridColumn();
						col.dataField = datalist[0].assetsSpecInfoList[k].name;
						col.headerText = ResourceManager.getInstance().getString("ViewerStrings",datalist[0].assetsSpecInfoList[k].name);
						cols.addItem(col);
					}
				}
				var col6:GridColumn = new GridColumn();
				col6.dataField = "remark";
//				col6.headerText = "备注";
				col6.headerText = ResourceManager.getInstance().getString("ViewerStrings","T00083");
				cols.addItem(col6);
				dg.columns = cols;
				for(var i:int=0;i<datalist.length;i++) {
					var newObj:Object = new Object();
					var ai:Object = datalist[i];
					newObj.id = ai.id;
					newObj.serialID = i+1;
					newObj.image = ai.image;
					newObj.name = ai.name;
					newObj.brand = ai.brand;
					newObj.model = ai.model;
					newObj.remark = ai.remark;
					for (var j:int = 0; j < ai.assetsSpecInfoList.length; j++) {	
						var aslist:AssetsSpecInfo = ai.assetsSpecInfoList[j];
						var str:String = aslist.name;
						newObj[str] = aslist.specValue;
					}
					viewList.addItem(newObj);
				}
				datasource = viewList;
			}
			
			/**
			 * 点击安装
			 */ 
			private function itemBuild():void {
				if (!validate()) {
					return;
				}
				buildBut.enabled = false;
				var obj:Object = dg.selectedItem;
				var bigType:String = typeSelect.bigType.selectedValue as String;
				switch(bigType)
				{
					case "cabinet": {
						var cabinet:CabinetDto = new CabinetDto();
						cabinet.typeId = typeSelect.midType.selectedItem.id;
						cabinet.name = obj.name;
						cabinet.areaId = uNumCombox.selectedItem.id;
						cabinet.assetsId = obj.id;
						cabinet.remark = obj.remark;
						cabinet.uCount = obj.uCount;
						cabinet.brand = obj.brand;
						cabinet.norm = obj.model;
						cabinet.code = cabinetCode.text;
						cabinet.isMain = cabType.selectedItem.id + "";
						cabinet.parentCabinetId = parentCabinetId;
						cabinetRemote.addCabinet(cabinet);
						break;
					}
					case "smartShelf": {
						var smartShelf:Shelf = new Shelf();
						smartShelf.cabinetId = parentId;
						smartShelf.name = obj.name;
						smartShelf.brand = obj.brand;
						smartShelf.remark = obj.remark;
						smartShelf.assetsId = obj.id;
						smartShelf.typeId = typeSelect.midType.selectedItem.id;
						smartShelf.uHoldCount = obj.uHoldCount;
						smartShelf.portCount = obj.portCount;
						smartShelf.productNo = obj.model;
						smartShelf.isBound = "0";
						smartShelf.code = selParentBt.text + "-" + uNumCombox.selectedItem.id;
						smartShelf.type = int(shelfTypeddl.selectedItem.id);
						smartShelf.uNo = uNumCombox.selectedItem.id;
						bgRemote.addEquipmentToCabinet(smartShelf);
						break;
					}
					case "shelf": {
						var shelf:Shelf = new Shelf();
						shelf.cabinetId = parentId;
						shelf.name = obj.name;
						shelf.brand = obj.brand;
						shelf.remark = obj.remark;
						shelf.assetsId = obj.id;
						shelf.typeId = typeSelect.midType.selectedItem.id;
						shelf.uHoldCount = obj.uHoldCount;
						shelf.portCount = obj.portCount;
						shelf.productNo = obj.model;
						shelf.code = selParentBt.text + "-" +uNumCombox.selectedItem.id;
						shelf.uNo = uNumCombox.selectedItem.id;
						shelf.type = int(shelfTypeddl.selectedItem.id);
						shelf.isBound = "1";
						bgRemote.addEquipmentToCabinet(shelf);
						break;
					}
					case "sysEqmt": {
						if (typeSelect.midType.selectedItem.id == "ZNZJ") {
							var controller:Controller = new Controller();
							controller.cabinetId = parentId;
							controller.name = obj.name;
							controller.brand = obj.brand;
							controller.assetsId = obj.id;
							controller.typeId = "ZNZJ";
							controller.productNo = obj.model;
							controller.uHoldCount = obj.uHoldCount;
							controller.uNo = uNumCombox.selectedItem.id;
							controller.isBound = "0";
							controller.eqmtId = selParentBt.text + "-" +uNumCombox.selectedItem.id;
							bgRemote.addEquipmentToCabinet(controller);
						} else if (typeSelect.midType.selectedItem.id == "ZNCJ") {
							var collector:Collector = new Collector();
							collector.cabinetId = parentId;
							collector.name = obj.name;
							collector.brand = obj.brand;
							collector.remark  = obj.remark;
							collector.assetsId = obj.id;
							collector.productNo = obj.model;
							collector.uNo = uNumCombox.selectedItem.id;
							collector.uHoldCount = obj.uHoldCount;
							collector.typeId = "ZNCJ";
							collector.isBound = "0";
							collector.eqmtId = selParentBt.text + "-" +uNumCombox.selectedItem.id;
							bgRemote.addEquipmentToCabinet(collector);
						}
						break;
					}
					case "netEqmt": {
						var netEqmt:NetEquipment = new NetEquipment();
						netEqmt.cabinetId = parentId;
						netEqmt.name = obj.name;
						netEqmt.brand = obj.brand;
						netEqmt.remark = obj.remark;
						netEqmt.assetsId = obj.id;
						netEqmt.uHoldCount = obj.uHoldCount;
						netEqmt.portCount = obj.portCount;
						netEqmt.fportCount = obj.fportCount;
						netEqmt.uNo = uNumCombox.selectedItem.id;
						netEqmt.code = selParentBt.text + "-" + uNumCombox.selectedItem.id;
						netEqmt.typeId = typeSelect.midType.selectedItem.id;
						netEqmt.ip = ip.text;
						netEqmt.password = password.text;
						netEqmt.productCode = obj.model;
						if (netEqmt.typeId == "YYJHJ") {
							netEqmt.type = 0;
						} else {
							netEqmt.type = 1;
						}
						bgRemote.addEquipmentToCabinet(netEqmt);
						break;
					}
					case "other" : {
						var other:OtherCabiEqmt = new OtherCabiEqmt();
						other.cabinetId = parentId;
						other.assetsId = obj.id;
						other.name = obj.name;
						other.brand = obj.brand;
						other.remark = obj.remark;
						other.uHoldCount = obj.uHoldCount;
						other.typeId = typeSelect.midType.selectedItem.id;
						other.uNo = uNumCombox.selectedItem.id;
						other.model = obj.model;
						bgRemote.addEquipmentToCabinet(other);
						break;
					}
					case "terminal" : {
						var terminal:Terminal = new Terminal();
						terminal.assetsId = obj.id;
						terminal.name = obj.name;
						terminal.brand = obj.brand;
						terminal.remark = obj.remark;
						terminal.portId = int(portNo.selectedItem.id);
						terminal.typeId = typeSelect.midType.selectedItem.id;
						terminalRemote.addTerminal(terminal);
						break;
					}
					default:
					{
						break;
					}
				}
			}
			
			/**
			 * 输入验证
			 */ 
			private function validate():Boolean {
				if (parentId == -1) {
//					Alert.show(parentName.text + "不能为空");
					Alert.show(parentName.text + ResourceManager.getInstance().getString("ViewerStrings","I00076"));
					return false;
				} else {
					if ((typeSelect.bigType.selectedValue != "terminal") && (uNumCombox.selectedIndex == -1)) {
//						Alert.show("请选择" + floor.text);
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","I00034") + floor.text);
						return false;
					}
				}
				if (typeSelect.bigType.selectedValue == "cabinet") {
					if (cabinetCode.text.length == 0) {						
//						Alert.show("机柜编号不能为空");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00049"));
						return false;
					}
					if (cabinetCode.text.length != 4) {
//						Alert.show("机柜编号固定为4位");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00050"));
						return false;
					}
				}
				if (typeSelect.bigType.selectedValue == "terminal") {
					if (portNo.selectedIndex == -1) {
//						Alert.show("请选择配线架端口");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","I00077"));
						return false;
					}
				}
				if (typeSelect.bigType.selectedValue == "netEqmt") {
					if (ip.text != "" && !CommonUtil.checkIp(ip.text)) {
						return false;
					}
				}
				return true;
			}
			
			private function addResult(event:ResultEvent):void{
				buildBut.enabled = true;
				var obj:Object = new Object();
				var data:Object;
				var result:int = int(event.result);
				if (result == 0) {
//					Alert.show("机柜编号重复，安装失败!");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00051"));
					return;
				}
				if (result == -1) {
//					Alert.show("端口数达到上限，安装失败");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00052"));
					return;
				}
				if (typeSelect.bigType.selectedValue == "cabinet") {
//					Alert.show("安装成功");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00053"));
					obj.buildingId = parentId;
					data = {arr:[EventType.REFRESH_ID[6],EventType.REFRESH_ID[8],EventType.REFRESH_ID[10],EventType.REFRESH_ID[13]],obj:obj};
					AppEvent.dispatch(EventType.REFRESH,data);
					clear();
					return;
				}
				
				// ---------------- 如果是扫描仪，不用闪 ----------
				obj.cabinetId = parentId;
				obj.buildingId = bid;
				obj.midType = typeSelect.midType.selectedItem.id;
				obj.uNo = uNumCombox.selectedItem.id;
				// 刷新U层
				refreshUno();
				data = {arr:[EventType.REFRESH_ID[6],EventType.REFRESH_ID[8],EventType.REFRESH_ID[10],EventType.REFRESH_ID[13]],obj:obj};
				AppEvent.dispatch(EventType.REFRESH,data);
//				Alert.show("安装成功!\n链接到机柜展示图？","提示",Alert.YES | Alert.NO,this,function (event:CloseEvent):void{
				Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00054"),ResourceManager.getInstance().getString("ViewerStrings","T00001"),Alert.YES | Alert.NO,this,function (event:CloseEvent):void{
					if (event.detail == Alert.YES) {
						AppEvent.dispatch(EventType.BASEMAP_CHANGE,3);
						AppEvent.dispatch(EventType.BUILD_SUCC_CABSHOW,obj);
					}
				});
				clear();
			}
			
			private function addTerminalResult(event:ResultEvent):void {
				var result:int = int(event.result);
				if (result == -1) {
//					Alert.show("该端口已被占用");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00055"));
				} else {
//					Alert.show("安装成功");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00053"));
					portRemote.getSpotPortsByLvlShelfId(shelfId);
					var data:Object = {arr:[EventType.REFRESH_ID[13]]};
					AppEvent.dispatch(EventType.REFRESH,data);
					clear();
				}
			}
			
			private function clear():void {
				//parentId = -1;
				//selParentBt.text = "";
				cabinetCode.text = "";
				uNumCombox.selectedIndex = -1;
				if(ip)ip.text = "";
				if(password)password.text = "";
				//portLbl.visible = false;
				//portNo.visible = false;
			}
			
			/**
			 * 取得所有楼层
			 */ 
			private function getAreas(event:ResultEvent):void {
				var array:ArrayCollection = event.result as ArrayCollection;
//				if (floor.text == "楼层/区域") {
				if (floor.text == ResourceManager.getInstance().getString("ViewerStrings","T00154")) {
					uNumCombox.dataProvider = array;
				} else {
					labelArr = new ArrayCollection();
					for (var i:int = 0; i < array.length; i++) {
						labelArr.addItem({index:i,name:array.getItemAt(i) + "U",id:array.getItemAt(i)});
					}
					uNumCombox.dataProvider = labelArr;
				}
			}
			
			private function getLevelShelves(event:ResultEvent):void {
				shelfSelect.init(event.result as ArrayCollection);
			}
			
			private function getSpot(event:ResultEvent):void {
				portNo.dataProvider = event.result as ArrayCollection;
			}
			
			protected function popUpSelect():void {
				PopUpManager.addPopUp(treeSelect,this);
				treeSelect.x = (mouseX + treeSelect.width)/2;
				treeSelect.y = (mouseY)/2 ;
				treeSelect.expandTree();
			}
			
			private function popShelfSelect():void {
				PopUpManager.addPopUp(shelfSelect,this);
				shelfSelect.x = (mouseX + shelfSelect.width)/2;
				shelfSelect.y = (mouseY)/2 ;
			}
			
			/**
			 * 上联(机柜)选择后
			 */ 
			public function upLinkSelect(obj:Object):void {
				if(isUplinkCab){
					selParentBtCab.text = obj.name;
					parentCabinetId = obj.id;
					selParentBtCab.setStyle("fontSize",12);
					return;
				}else{
					selParentBt.text = obj.name;
					selParentBt.setStyle("fontSize",12);
					parentId = int(obj.id);
					bid = int(obj.bid);
				}
				if (isCabinet) {
					uNumCombox.visible = true;
					uNumCombox.width = 80;
					asRemote.getAllAreasByBuildingId(parentId);
				} else {
					if (typeSelect.bigType.selectedValue == "terminal") {
						shelf.enabled = true;
						// -------- 获取机柜下的水平配线架 ------
						cabinetRemote.getLevelShelvesByCabinetId(parentId);
//						shelf.text = "点击选择";
						shelf.text = ResourceManager.getInstance().getString("ViewerStrings","I00065");
					} else {
						uNumCombox.visible = true;
						uNumCombox.width = 80;
						portLbl.visible = false;
						portNo.visible = false;
						refreshUno();
					}
				}
			}
			
			/**
			 * 配线架选择关闭
			 */ 
			public function shelfSelectClose(obj:Object):void {
				shelf.text = obj.code;
				shelfId = obj.id;
				portRemote.getSpotPortsByLvlShelfId(shelfId);
			}
			
			/**
			 * 表格点击
			 */ 
			private function onGridClick():void {
				if (dg.selectedItem) {
					editArea.enabled = true;
					if (!isCabinet && parentId != -1) {
						refreshUno();
					}
				}
			}
			
			/**
			 * 刷新U层
			 */ 
			private function refreshUno():void {
				var type:int;
				if (typeSelect.bigType.selectedValue == "smartShelf") {
					type = 0;
				} else if (typeSelect.midType.selectedItem.id == "ZNCJ") {
					type = 1;
				} else {
					type = 2;
				}
				bgRemote.getEmptyuNos(parentId,type,int(dg.selectedItem.uHoldCount));
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="terminal"/>
		<s:State name="other"/>
	</s:states>
	<s:DataGrid id="dg" top="0" bottom="20" width="100%" height="90%" dataProvider="{datasource}"
				gridClick="onGridClick()" itemRenderer="widgets.CabinetManager.mySkin.item">
	</s:DataGrid>
	<s:HGroup id="editArea" width="100%" height="10%" enabled="false">
		<s:HGroup width="100%" height="10%" enabled="{editArea.enabled}">
			<s:HGroup width="70%" height="100%" horizontalAlign="left" verticalAlign="bottom" enabled="{editArea.enabled}">
				<s:Label id="parentName" left="4" height="16"/>
				<s:TextInput id="selParentBt" click="popUpSelect();treeSelect.isUplinkCab=false;isUplinkCab=false;" editable="false" fontSize="10" text="{ResourceManager.getInstance().getString('ViewerStrings','I00065')}"/>
				<s:HGroup includeIn="other" verticalAlign="bottom">
					<s:Label id="floor" width="60" height="18"/>
					<s:DropDownList id="uNumCombox" visible="true" width="100" labelField="name" prompt="{ResourceManager.getInstance().getString('ViewerStrings','I00034')}"/>
					<s:Label visible="{showShelfType}" width="{showShelfType ? 30 : 0}" height="18" text="{ResourceManager.getInstance().getString('ViewerStrings','T00093')}"/>
					<s:DropDownList id="shelfTypeddl" visible="{showShelfType}" width="{showShelfType ? 70 : 0}" dataProvider="{shelfType}" labelField="name" selectedIndex="0"/>
					<s:Label visible="{showIpPswd}" text="IP" width="{showIpPswd ? 30 : 0}" height="18"/>
					<s:TextInput id="ip" restrict="0-9 \." visible="{showIpPswd}" width="{showIpPswd ? 120 : 0}" height="18"/>
					<s:Label text="{ResourceManager.getInstance().getString('ViewerStrings','T00155')}" visible="{showIpPswd}" width="{showIpPswd ? 30 : 0}" height="18"/>
					<s:TextInput id="password" maxChars="50" restrict="^\u4e00-\u9fa5" visible="{showIpPswd}" width="{showIpPswd ? 80 : 0}" height="18"/>
				</s:HGroup>
				<s:HGroup includeIn="terminal" verticalAlign="bottom">
					<s:Label height="18" text="{ResourceManager.getInstance().getString('ViewerStrings','T00156')}"/>
					<s:TextInput id="shelf" width="100" click="popShelfSelect()" enabled="false" fontSize="10" text="{ResourceManager.getInstance().getString('ViewerStrings','I00065')}"/>
					<s:Label id="portLbl" visible="{showPortNum}" height="16" text="{ResourceManager.getInstance().getString('ViewerStrings','T00157')}"/>
					<s:DropDownList id="portNo" visible="{showPortNum}" width="75" labelField="code" prompt="{ResourceManager.getInstance().getString('ViewerStrings','I00034')}"/>
				</s:HGroup>
				<s:Label visible="{showCabCode}" height="16" text="{ResourceManager.getInstance().getString('ViewerStrings','T00159')}"/>
				<s:TextInput id="cabinetCode" visible="{showCabCode}" width="80" maxChars="4" restrict="A-z 0-9"/>
				<s:Label visible="{showCabCode}" height="18" text="{ResourceManager.getInstance().getString('ViewerStrings','T00117')}"/>
				<s:DropDownList id="cabType" visible="{showCabCode}" width="50" dataProvider="{cabTypeArr}" labelField="name" selectedIndex="0">
				</s:DropDownList>
				<s:Label visible="{showCabCode}" height="18" text="{ResourceManager.getInstance().getString('ViewerStrings','T00160')}"/>
				<s:TextInput id="selParentBtCab" includeInLayout="{showCabCode}" visible="{showCabCode}" click="popUpSelect();treeSelect.isUplinkCab=true;isUplinkCab=true;" editable="false" fontSize="10" text="{ResourceManager.getInstance().getString('ViewerStrings','I00065')}"/>
				<s:Button label="{ResourceManager.getInstance().getString('ViewerStrings','T00119')}" click="{selParentBtCab.text = '';parentCabinetId=0;selParentBtCab.text=ResourceManager.getInstance().getString('ViewerStrings','I00065');selParentBtCab.setStyle('fontSize',10);}" includeInLayout="{showCabCode}" visible="{showCabCode}"/>
			</s:HGroup>
			<s:HGroup width="30%" height="100%" horizontalAlign="right" verticalAlign="bottom" enabled="{editArea.enabled}">
				<s:Button id="buildBut" right="10" label="{ResourceManager.getInstance().getString('ViewerStrings','T00161')}" click="itemBuild()"/>
			</s:HGroup>
		</s:HGroup>
	</s:HGroup>
</s:VGroup>
