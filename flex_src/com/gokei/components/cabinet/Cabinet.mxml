<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012 GOKEI. All Rights Reserved.
//
// 机柜展示图

// @Author zhang
// @Version v1.0
// @Date 2012-09
///////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:AnimateFilter id="animate" repeatCount="0" duration="300" repeatBehavior="reverse" bitmapFilter="{gf}">
			<s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1"/>
		</s:AnimateFilter>
		<s:GlowFilter id="gf" blurX="5" blurY="5" strength="255" color="0xff00ff" alpha="1"/>
		<s:RemoteObject id="remote" destination="backgroundService" fault="onFault(event)">
			<s:method name="getCabinetInfo" result="getCabinetInfoResult(event)" />
			<s:method name="getTagetPortInfo" result="getTargetResult(event)" />
			<s:method name="getCabinetShowPortList" result="getPortListResult(event)" />
		</s:RemoteObject>
		<s:RemoteObject id="cabRemote" destination="cabinetService" fault="onFault(event)">
			<s:method name="isCabinetWarning" result="isCabinetWarningResult(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.esri.viewer.AppEvent;
			import com.gokei.components.EventType;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.SWFLoader;
			import mx.events.CloseEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.resources.ResourceManager;
			
			import spark.components.Image;
			import spark.components.Label;
			// 配线操作类型,默认为查询
			private var wiringType:String = "info";
			// 所有的配线架，网络设备
			private var _eqmtList:Array;
			// 机柜的总U数
			private var uCount:int;
			// 被选中的设备
			private var selectedEqmt:Equipment;
			// 目标配线架
			private var targetEqmt:Equipment;
			// 告警灯
			private var lamp:AlarmLamp;
			// 被选中的起始端口
			private var firstPort:PortView;
			// 被选中的目标端口
			private var secondPort:PortView;
			// 被选中的起始端口
			private var firstPortX:PortView;
			// 被选中的目标端口
			private var secondPortX:PortView;
			// 选择的是第一个端口
			private var firstSelect:Boolean = true;
			// 可以继续配线
			private var continueable:Boolean = true;
			// 跨机柜配线
			private var doubleCabinet:Boolean = false;
			// 显示目标端口
			private var targetShow:Boolean = false;
			// 显示目标端口(配线单联动)
			private var targetShowX:Boolean = false;
			// 目标端口是跨机柜
			private var targetIsDouble:Boolean = false;
			// 是否记录轨迹
			private var locus:Boolean = false;
			//  是否有告警灯显示
			private var alarmShow : Boolean = false;
			// 添加的跳线
			private var currentCable:Cable;
			// 机柜信息
			private var cabinetInfo:Object;
			// 端口信息
			private var portInfo:Object;
			// 目标端口序号
			private var targetPortCode:String;
			// 机柜索引
			public var cabinetIndex:int;
			
			private var showCableObj:Object;
			// 载入顺序
			private var loadIndex:int;
			// 载入两个双设备
			private var loadDouble:Boolean = false;
			// 告警灯
			private var alarmLamp:SWFLoader;
			// 显示所有端口
			private var showAllPorts:Boolean = false;
			// 显示所有端口的图片
			private var showAllPortsImg : Image;
			// 展示图到管理图的联动对象
			private var portStatusInfo:Object = new Object();
			//链路追踪
			private var showChain : Boolean = false;
			/**
			 * 机柜图初始化
			 */ 
			private function init():void {
				scaleX = 0.25;
				scaleY = 0.25;
				// ---------------- 配线工具切换 ---------------
				AppEvent.addListener(EventType.WIRING_OPT,function(event:AppEvent):void {
					wiringType = event.data as String;
					AppEvent.dispatch(EventType.ADDCABLE_CANCEL);
					cableGroup.removeAllElements();
				});
				// ---------------- 添加跳线确认 ----------------
				AppEvent.addListener(EventType.ADDCABLE_OK,function(event:AppEvent):void {
					firstPort = null;
					secondPort = null;
					continueable = true;
					firstSelect = true;
					animate.target = null;
					animate.stop();
					if (selectedEqmt) {
						selectedEqmt.hiddeArrow();
					}
					if (targetEqmt) {
						targetEqmt.hiddeArrow();
					}
				});
				// ---------------- 添加跳线取消 ----------------
				AppEvent.addListener(EventType.ADDCABLE_CANCEL,addCableCancel);
				// ---------------- 跨机柜配线 ----------------
				AppEvent.addListener(EventType.DOUBLE_CABINET,function(event:AppEvent):void {
					doubleCabinet = event.data as Boolean;
				});
				// ---------------- 记录轨迹 ----------------
				AppEvent.addListener(EventType.LOCUS_RECORD,function(event:AppEvent):void {
					locus = event.data as Boolean;
				});
				// ---------------- 跨机柜清除 ------------------
				AppEvent.addListener(EventType.DOUBLE_CABINET_CLEAR,doubleCabinetClear);
				// ---------------- 鼠标滚轮，机柜放大缩小 ----------------
				addEventListener(MouseEvent.MOUSE_WHEEL,onwheel);
				// ---------------- 显示机柜告警灯 ----------------
				AppEvent.addListener(EventType.CABINET_ALARM_LAMP,function(event:AppEvent):void{
					//查询当前机柜是否有告警信息
					if(cabinetInfo){
						cabRemote.isCabinetWarning(cabinetInfo.id);
					}
				});
				
				AppEvent.addListener(EventType.PORT_STATUS_LINK,portStatusLink);
				// ---------------- 显示链路图 ----------------
				AppEvent.addListener(EventType.LINK_CHAIN,function(event:AppEvent):void{
					showChain = event.data as Boolean;
				});
				// ---------------- 管理图点击关闭机柜，展示图关闭 ----------------
				AppEvent.addListener(EventType.MNG_DIA_CABINET_CLOSE,mngDiaCabClose);
			}
			
			/**
			 * 获得机柜信息
			 * @param id 机柜ID
			 */ 
			public function show(id:int):void {
				// ---------------- 初始化机柜，不可清除  ----------------
				remote.getCabinetInfo(id);
			}
			
			public function mngDiaCabClose(event:AppEvent):void{
				if(int(event.data) == cabinetIndex){
					closeCabinet();
				}
			}
			
			/**
			 * 关闭机柜
			 */ 
			public function closeCabinet():void {
				cabinetGroup.removeAllElements();
				cableGroup.removeAllElements();
				AppEvent.dispatch(EventType.CABINET_CLOSE,cabinetIndex);
			}
			
			/**
			 * 关闭机柜(鼠标点击)
			 */ 
			private function onCloseCabinet(event:MouseEvent):void {
				closeCabinet();
			}
			
			/**
			 * 显示所有端口（鼠标点击）
			 * */
			private function onShowAllPorts(event:MouseEvent):void {
				refreshAllPort();
			}
			
			/**
			 * 刷新机柜
			 * */
			private function refreshCabinet(event:MouseEvent):void{
				var arr : ArrayCollection = new ArrayCollection();
				arr.addItem(cabinetInfo.id);
				AppEvent.dispatch(EventType.CABINET_REFRESH,arr);
			}
			
			public function refreshAllPort():void {
				loadIndex = uCount + 1;
				while(true) {
					loadIndex --;
					if (loadIndex == 0) {
						showAllPorts = false;
						showAllPortsImg.enabled = true ;
						break;
					}
					if (_eqmtList[loadIndex]) {
						targetEqmt = _eqmtList[loadIndex];
						if (targetEqmt.portList == null && targetEqmt.type < 2) {
							remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
							showAllPorts = true;
							showAllPortsImg.enabled = false ;
							break;
						}
					}
				}
			}
			
			public function get info():Object {
				return cabinetInfo;
			}
			
			public function get eqmtList():Object {
				return _eqmtList;
			}
			
			/**
			 * 创建机柜图
			 * @param uCount 机柜的总U数
			 * @param code 机柜编号
			 * @return void
			 */ 
			public function createCabinet(uCount:int,code:String):void {
				cabinetGroup.removeAllElements();
				cableGroup.removeAllElements();
				var top:Image = new Image();
				top.source = "assets/images/top.png";
				// ---------------- 添加机柜顶 ----------
				cabinetGroup.addElement(top);
				var caCode:Label = new Label();
				caCode.text = code;
				// ---------------- 添加机柜编号 ----------
				cabinetGroup.addElement(caCode);
				caCode.setStyle("fontSize",48);
				caCode.setStyle("color",0xFFFFFF);
				caCode.x = 450;
				caCode.y = 40;
				var close:Image = new Image();
				close.width = 35;
				close.height = 35;
				close.useHandCursor = true;
				close.buttonMode = true;
				close.smooth = true;
				close.source="assets/images/close.png";
				// ---------------- 添加机柜关闭按钮 ----------
				cabinetGroup.addElement(close);
				close.x = 850;
				close.y = 48;
//				close.toolTip = "关闭机柜";
				close.toolTip = ResourceManager.getInstance().getString("ViewerStrings","I00001");
				close.addEventListener(MouseEvent.CLICK,onCloseCabinet);
				// ---------------- 添加显示所有端口按钮 ----------
				showAllPortsImg = new Image();
				showAllPortsImg.width = 35;
				showAllPortsImg.height = 35;
				showAllPortsImg.useHandCursor = true;
				showAllPortsImg.buttonMode = true;
				showAllPortsImg.smooth = true;
				showAllPortsImg.source = "assets/images/showAll.png";
				cabinetGroup.addElement(showAllPortsImg);
				showAllPortsImg.x = 805;
				showAllPortsImg.y = 48;
//				showAllPortsImg.toolTip = "显示所有端口";
				showAllPortsImg.toolTip = ResourceManager.getInstance().getString("ViewerStrings","I00002");
				showAllPortsImg.addEventListener(MouseEvent.CLICK,onShowAllPorts);
				// ---------------- 刷新机柜按钮 ----------
				var refreshCab:Image = new Image();
				refreshCab.width = 35;
				refreshCab.height = 35;
				refreshCab.useHandCursor = true;
				refreshCab.buttonMode = true;
				refreshCab.smooth = true;
				refreshCab.source="assets/images/refresh.png";
				refreshCab.addEventListener(MouseEvent.CLICK,refreshCabinet);
				// ---------------- 添加机柜关闭按钮 ----------
				cabinetGroup.addElement(refreshCab);
				refreshCab.x = 760;
				refreshCab.y = 48;
//				refreshCab.toolTip = "刷新";
				refreshCab.toolTip = ResourceManager.getInstance().getString("ViewerStrings","I00003");
				// ---------------- 添加告警灯 ----------
				alarmLamp = new SWFLoader();
				alarmLamp.source = "assets/images/alarmLamp.swf";
				alarmLamp.width = 18;
				alarmLamp.height = 18;
				cabinetGroup.addElement(alarmLamp);
				alarmLamp.x = 100;
				alarmLamp.y  = 64;
				alarmLamp.visible = false;
				var num:int = 87;
				for (var i:int = 0; i < uCount;i++) {
					var epmt:Image = new Image();
					if (i % 2 == 0) {
						epmt.source = "assets/images/empty1.png"
					} else {
						epmt.source = "assets/images/empty2.png"
					}
					cabinetGroup.addElement(epmt);
					epmt.y = num;
					var lab:Label = new Label();
					lab.text = "" +(uCount - i);
					cabinetGroup.addElement(lab);
					lab.y = num + 13;
					if ((uCount - i) < 10 ) {
						lab.x = 34;
					} else {
						lab.x = 22;
					}
					lab.setStyle("fontSize",40);
					lab.setStyle("color",0xFFFFFF);
					num += 80;
				}
				var bottom:Image = new Image();
				bottom.source = "assets/images/bottom.png";
				// ---------------- 添加机柜底 ----------
				cabinetGroup.addElement(bottom);
				bottom.y = num;
			}
			/**
			 * 添加配线取消
			 */ 
			private function addCableCancel(event:AppEvent):void {
				// ---------------- 改变端口状态 ----------
				if (wiringType == "add" || wiringType == "auto") {
					if(firstPort)firstPort.status = 0;
					if(secondPort)secondPort.status = 0;
				} else if (wiringType == "remove" || wiringType=="change") {
					if (firstPort)firstPort.status = 1;
					if (secondPort)secondPort.status = 1;
				} else if(wiringType == "modify"){
					if (firstPort)firstPort.status = 1;
					if (secondPort) {
						if (secondPort.status == 4)secondPort.status = 1;
						if (secondPort.status == 3)secondPort.status = 0;
					}
				}
				
				firstPort = null;
				secondPort = null;
				if (currentCable) {
					try {
						cableGroup.removeElement(currentCable);
					} catch(e:Error) {
						
					}
					currentCable = null;
				}
				animate.target = null;
				animate.stop();
				if (selectedEqmt) {
					selectedEqmt.hiddeArrow();
				}
				if (targetEqmt) {
					targetEqmt.hiddeArrow();
				}
				// ---------------- 可以继续配线  ----------------------
				continueable = true;
				// ---------------- 配线时，选择的端口是起始端口  -------
				firstSelect = true;	
				
				AppEvent.dispatch(EventType.DOUBLE_CABINET_CLEAR);
			}
			
			private function doubleCabinetClear(event:AppEvent):void {
				animate.target = null;
				animate.stop();
				if (selectedEqmt) {
					selectedEqmt.hiddeArrow();
				}
				if (targetEqmt) {
					targetEqmt.hiddeArrow();
				}
				if (!locus) {
					cableGroup.removeAllElements();
				}
			}
			
			/**
			 * 鼠标滚轮滚动，机柜图放大缩小
			 * @param event 鼠标事件
			 * @return void
			 */ 
			private function onwheel(event:MouseEvent):void {
				if (event.delta < 0) {
					if (scaleX <= 0.25) {
						return;
					}
					scaleX = scaleX - 0.05;
					scaleY = scaleY - 0.05
				} else {
					if (scaleX > 0.7) {
						return;
					}
					scaleX = scaleX + 0.05;
					scaleY = scaleY + 0.05;
				}
			}
			
			/**
			 * 机柜管理图到展示图联动
			 */
			public function mngFindShow(obj:Object):void {
				targetEqmt = _eqmtList[obj.uNo];
				if (wiringType == 'info'){
					targetEqmt.showArrow();
					firstPort = targetEqmt.getPortViewByCode(obj.portCode);
					targetEqmt.setElementIndex(firstPort,targetEqmt.numElements - 1);
					animate.target = firstPort;
					animate.play();
				} else {
					var cabEvt:CabinetEvent = new CabinetEvent("");
					cabEvt.portView = targetEqmt.getPortViewByCode(obj.portCode) as PortView;
					cabEvt.equipment = targetEqmt;
					portClick(cabEvt);
				}
			}
			
			private function diaMngLink(portIndex:int,portCode:String,uNo:int,status:int):void {
				portStatusInfo.cabinetIndex = cabinetIndex ;
				portStatusInfo.portIndex = portIndex;
				portStatusInfo.portCode = portCode;
				portStatusInfo.uNo = uNo;
				portStatusInfo.status = status;
				AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
			}
			
			private function portStatusLink(event:AppEvent):void {
				var obj:Object = event.data;
				if (!cabinetInfo)return;
				if (cabinetInfo.code == obj.cabinetCode) {
					targetEqmt = _eqmtList[obj.uNo];
					if (targetEqmt.portList) {
						secondPort = targetEqmt.getPortViewByCode(obj.portCode);
						secondPort.status = 3;
						portStatusInfo.cabinetIndex = cabinetIndex;
						portStatusInfo.uNo = targetEqmt.uNo;
						portStatusInfo.portCode = secondPort.code;
						portStatusInfo.portIndex = 1;
						portStatusInfo.status = 3;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
						var cable:Cable = new Cable(new Point(firstPort.x + firstPort.parent.x + firstPort.width/2,firstPort.y
							+firstPort.parent.y+firstPort.height/2-firstPort.reverse*firstPort.height),new Point(secondPort.x+secondPort.parent.x+secondPort.width/2,secondPort.y + 
								secondPort.parent.y + secondPort.height/2 - secondPort.reverse*secondPort.height));
						cableGroup.addElement(cable);
						currentCable = cable;
						portInfo = new Object();
						portInfo.id = int(secondPort.id);
						portInfo.cabinetCode = cabinetInfo.code;
						portInfo.uNo = targetEqmt.uNo;
						portInfo.portCode = secondPort.code;
						portInfo.infoCode = secondPort.infoCode;
						portInfo.portIndex = 1;
						portInfo.linetype = secondPort.linetype;
						portInfo.doubleCabinet = doubleCabinet ? "double" : null;
						AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
					} else {
						targetShow = true;
						targetPortCode = obj.portCode;
						remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					}
				}
			}
			
			/**
			 * 载入机柜信息
			 */ 
			private function getCabinetInfoResult(event:ResultEvent):void {
				cabinetInfo = event.result;
				cabinetInfo.cabinetIndex = cabinetIndex;
				uCount = cabinetInfo.uCount;
				_eqmtList = new Array();
				// ---------------- 创建空机柜 ----------
				createCabinet(uCount,cabinetInfo.code);
				// ---------------- 创建所有配线架 ----------
				createEquipment(cabinetInfo.shelfInfoList as ArrayCollection,0);
				// ---------------- 创建所有网络设备 ----------
				createEquipment(cabinetInfo.netEquipmentInfoList as ArrayCollection,1);
				// ---------------- 创建所有控制器 ----------
				createEquipment(cabinetInfo.controllerInfoList as ArrayCollection,2);
				// ---------------- 创建其他设备 ----------
				createEquipment(cabinetInfo.otherCabiEqmtList as ArrayCollection,3);
				// ---------------- 创建所有采集器 ----------
				createCollector(cabinetInfo.collectorList as ArrayCollection);
				AppEvent.dispatch(EventType.CABINET_SHOW_MNG,cabinetInfo);
			}
			
			/**
			 * 设备闪动
			 */ 
			public function waveEuipment(obj:Object):void {
				if (selectedEqmt) {
					selectedEqmt.stopWave();
					selectedEqmt.hiddeArrow();
				}
				selectedEqmt = _eqmtList[obj.uNo];
				// ---------------- 如果是扫描仪，可能为空 ------
				if (selectedEqmt) {
					selectedEqmt.showArrow(1);
					selectedEqmt.startWave();
				}
			}
			
			/**
			 * 获得目标端口信息
			 */ 
			private function getTargetResult(event:ResultEvent):void {
				var obj:Object = event.result;
				// ---------------- 目标端口不在本机柜 ----------
				if (cabinetInfo.id != obj.cabinetId) {
					animate.target = firstPort;
					animate.stop();
					animate.play();
					selectedEqmt.showArrow();
					var showData:Object = new Object();
					showData.currentCabinet = this;
					showData.target = obj;
					targetIsDouble = true;
					//AppEvent.dispatch(EventType.DOUBLE_CABINET_SHOW,showData);
					if (wiringType == 'remove'){
						AppEvent.dispatch(EventType.DOUBLE_CABINET_SHOW,showData);
						firstPort.status = 4;
						portStatusInfo.status = 4;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					} else if (wiringType == 'modify') {
						animate.stop();
						animate.target = null;
						firstPort.status = 4;
						portStatusInfo.status = 4;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					} else if (wiringType == 'link') {
						AppEvent.dispatch(EventType.DOUBLE_CABINET_SHOW,showData);
						portStatusInfo.status = 1;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
						portStatusInfo.uNo = obj.uNo;
						portStatusInfo.portCode = obj.portCode;
						portStatusInfo.portIndex = 1 ;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					}
					return;
				}
				targetIsDouble = false;
				// ---------------- 通过U层数找到配线架或机柜 ----------
				targetEqmt = _eqmtList[obj.uNo];
				// ---------------- 已经显示第二个配线架的端口信息 ----------
				if (targetEqmt.portList != null) {
					// ------------ 通过端口序号，找到端口 ----------
					secondPort = targetEqmt.getPortViewByCode(obj.portCode);
					if (wiringType != 'link'){
						if (obj.side == 1){
							firstPort = secondPort = null ;
							firstSelect = true;
							return ;
						} else{
							secondPort.status = 4;
							firstPort.status = 4;
							//第一个端口
							portStatusInfo.status = 4;
							AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
							//第二个端口
							portStatusInfo.uNo = obj.uNo;
							portStatusInfo.portCode = obj.portCode;
							portStatusInfo.portIndex = 1 ;
							AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
						}
					} else {
						portStatusInfo.status = 1;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
						portStatusInfo.uNo = obj.uNo;
						portStatusInfo.portCode = obj.portCode;
						portStatusInfo.portIndex = 1 ;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					}
					// ------------ 创建线缆 -----------------------
					var cable:Cable = new Cable(new Point(firstPort.x + firstPort.parent.x + firstPort.width/2,firstPort.y
						+firstPort.parent.y+firstPort.height/2-firstPort.reverse*firstPort.height),new Point(secondPort.x+secondPort.parent.x+secondPort.width/2,secondPort.y + 
							secondPort.parent.y + secondPort.height/2 - secondPort.reverse*secondPort.height),obj.side);
					cableGroup.addElement(cable);
					currentCable = cable;
					portInfo = new Object();
					portInfo.id = obj.portId;
					portInfo.cabinetCode = cabinetInfo.code;
					portInfo.uNo = obj.uNo;
					portInfo.portCode = secondPort.code;
					portInfo.infoCode = secondPort.infoCode;
					portInfo.linetype = secondPort.linetype;
					portInfo.portIndex = 1;
					// ---------------- 第二个端口信息显示在配线管理widget上 -----------------------
					if (wiringType != 'modify') {
						AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
					}
				} else {
					targetPortCode = obj.portCode;
					// ------------ 查询第二个配线架的端口信息 ----------
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					targetShow = true;
				}
				if (wiringType != "modify" && wiringType != "link") {
					continueable = false;
				}
			}
			
			/**
			 * 获得配线架上的端口信息
			 */ 
			private function getPortListResult(event:ResultEvent):void {
				var list:ArrayCollection = event.result as ArrayCollection;
				var obj:Object = new Object();
				obj.cabinetIndex = cabinetIndex;
				obj.portList = list;
				if (targetShow) {
					targetEqmt.portList = list;
					obj.uNo = targetEqmt.uNo;
					secondPort = targetEqmt.getPortViewByCode(targetPortCode);
					targetEqmt.setElementIndex(secondPort,targetEqmt.numElements - 1);
					if(wiringType == "auto" ) {
						secondPort.status = 3;
						portStatusInfo.status = 3;
					} else if(wiringType == "link"){
						portStatusInfo.status = 1;
					} else {
						secondPort.status = 4;
						portStatusInfo.status = 4;
					}
					
					// 管理图 端口联动
					portStatusInfo.cabinetIndex = cabinetIndex;
					portStatusInfo.uNo = targetEqmt.uNo;
					portStatusInfo.portCode = secondPort.code;
					portStatusInfo.portIndex = 1 ;
					setTimeout(function():void{
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					},1000);
					// ------------ 显示的端口是跨机柜  -----------------------
					if (targetIsDouble) {
						animate.target = secondPort;
						animate.stop();
						animate.play();
					} else {
						setTimeout(function():void {
							var cable:Cable = new Cable(new Point(firstPort.x + firstPort.parent.x + firstPort.width/2,firstPort.y
								+firstPort.parent.y+firstPort.height/2-firstPort.reverse*firstPort.height),new Point(secondPort.x+secondPort.parent.x+secondPort.width/2,secondPort.y + 
									secondPort.parent.y + secondPort.height/2 - secondPort.reverse*secondPort.height));
							cableGroup.addElement(cable);
							currentCable = cable;},1000);
					}
					portInfo = new Object();
					portInfo.id = secondPort.id;
					portInfo.cabinetCode = cabinetInfo.code;
					portInfo.uNo = obj.uNo;
					portInfo.portCode = secondPort.code;
					portInfo.infoCode = secondPort.infoCode;
					portInfo.linetype = secondPort.linetype;
					portInfo.portIndex = 1;
					// ---------------- 第二个端口信息显示在配线管理widget上 -----------------------
					AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
					targetIsDouble = false;
					targetShow = false;
				} else if(targetShowX) {
					targetEqmt.portList = list;
					obj.uNo = targetEqmt.uNo;
					secondPortX = targetEqmt.getPortViewByCode(targetPortCode);
					targetEqmt.setElementIndex(secondPortX,targetEqmt.numElements - 1);
					// 管理图 端口联动
					setTimeout(function():void{
						diaMngLink(1,secondPortX.code,targetEqmt.uNo,secondPortX.status);
					},1000);
					// ------------ 显示的端口是跨机柜  -----------------------
					if (targetIsDouble) {
						animate.target = secondPortX;
						animate.stop();
						animate.play();
					}
					targetIsDouble = false;
					targetShowX = false;
				} else if(alarmShow) {
					targetEqmt.portList = list;
					lamp = targetEqmt.getAlarmLampByCode(targetPortCode);
					lamp.startAlarm();
					obj.uNo = targetEqmt.uNo;
					var alarmObj:Object = {uNo:obj.uNo,portCode:targetPortCode};
					setTimeout(function():void {
						AppEvent.dispatch(EventType.ALARM_CABINET_MNG,alarmObj);
					},1000);
					alarmShow = false;
				} else if (loadDouble) {
					targetEqmt.portList = list;
					obj.uNo = targetEqmt.uNo;
					if (loadIndex == 0) {
						firstPortX = targetEqmt.getPortViewByCode(showCableObj.portCode1);
						setTimeout(function():void {
							diaMngLink(0,firstPortX.code,obj.uNo,firstPortX.status);
						},1000);
						targetEqmt = _eqmtList[showCableObj.uNo2];
						loadIndex = 1;
						remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					} else if (loadIndex == 1) {
						secondPortX = targetEqmt.getPortViewByCode(showCableObj.portCode2);
						setTimeout(function():void {
							diaMngLink(1,secondPortX.code,targetEqmt.uNo,secondPortX.status);
						},1000);
						loadIndex = 3;
					} else if (loadIndex == 2) {
						firstPortX = targetEqmt.getPortViewByCode(showCableObj.portCode1);
						setTimeout(function():void {
							diaMngLink(0,firstPortX.code,targetEqmt.uNo,firstPortX.status);
						},1000);
						loadIndex = 3;
					}
					if (loadIndex == 3) {
						var cable:Cable = new Cable(new Point(firstPortX.x + firstPortX.parent.x + firstPortX.width/2,firstPortX.y
							+firstPortX.parent.y+firstPortX.height/2-firstPortX.reverse*firstPortX.height),new Point(secondPortX.x+secondPortX.parent.x+secondPortX.width/2,secondPortX.y + 
								secondPortX.parent.y + secondPortX.height/2 - secondPortX.reverse*secondPortX.height));
						cableGroup.addElement(cable);
						currentCable = cable;
						loadDouble = false;
					}
				}else if(showAllPorts){
					targetEqmt.portList = list;
					obj.uNo = targetEqmt.uNo;
					while(true) {
						loadIndex --;
						if (loadIndex == 0) {
							showAllPorts = false;
							showAllPortsImg.enabled = true ;
							break;
						}
						if (_eqmtList[loadIndex]) {
							targetEqmt = _eqmtList[loadIndex];
							if (targetEqmt.portList == null && targetEqmt.type < 2) {
								remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
								break;
							}
						}
					}
				} else {
					selectedEqmt.portList = list;
					obj.uNo = selectedEqmt.uNo;
				}
				AppEvent.dispatch(EventType.EQMT_PORTLIST_MNG,obj);
			}
			
			/**
			 * 添加配线架
			 * @param list 配线架（网络设备）信息数组
			 * @param type 设备类型
			 * @return void
			 */ 
			public function createEquipment(list:ArrayCollection,type:int):void {
				for (var i:int; i < list.length; i++) {
					var item:Object = list.getItemAt(i);
					var eqmt:Equipment = new Equipment(type,item.ai.image);
					eqmt.eqmtId = item.id;
					eqmt.uNo = int(item.uNo);
					eqmt.shelfType = item.type;
					eqmt.portCount = item.portCount;
					eqmt.typeId = item.typeId;
					eqmt.isBound = item.isBound;
					cabinetGroup.addElement(eqmt);
					eqmt.x = 96;
					eqmt.y = 80 * (uCount - int(item.uNo)) + 87;
					// ------------ 点击设备 ------------
					if(type < 2) {
						eqmt.addEventListener(CabinetEvent.EQUIPMENT_CLICK,equipmentClick);
					}
					// ------------ 点击端口，冒泡 -------------
					eqmt.addEventListener(CabinetEvent.PORT_CLICK_BUBBLE,portClick);
					_eqmtList[eqmt.uNo] = eqmt;
				}
			}
			
			/**
			 * 创建采集器
			 * @param list 采集器信息数组
			 * @return void 
			 */ 
			private function createCollector(list:ArrayCollection):void {
				for (var i:int; i < list.length; i++){
					var item:Object = list.getItemAt(i);
					var collector:Image = new Image();
					if (item.isBound == "1") {
						collector.source = "assets/images/collector.png";
					} else {
						collector.source = "assets/images/collectorX.png";
					}
					cabinetGroup.addElement(collector);
					collector.x = 468;
					collector.y = 80 * (uCount - int(item.uNo)) + 125;
				}
			}
			/**
			 * 目标端口在第二个机柜上，在该机柜上显示端口
			 * @param obj 第二个机柜的信息
			 * @return void
			 */ 
			public function showTargetPort(obj:Object):void {
				targetEqmt = _eqmtList[obj.uNo];
				targetEqmt.showArrow();
				if (targetEqmt.portList != null) {
					// ------------ 通过端口序号，找到端口 ----------
					secondPort = targetEqmt.getPortViewByCode(obj.portCode);
					targetEqmt.setElementIndex(secondPort,targetEqmt.numElements - 1);
					if (wiringType != "link") {
						secondPort.status = 4;
						portStatusInfo.status = 4;
					} else {
						portStatusInfo.status = 1;
					}
					animate.target = secondPort;
					animate.stop();
					animate.play();
					portInfo = new Object();
					portInfo.id = obj.portId;
					portInfo.cabinetCode = cabinetInfo.code;
					portInfo.uNo = obj.uNo;
					portInfo.portCode = secondPort.code;
					portInfo.infoCode = secondPort.infoCode;
					portInfo.linetype = secondPort.linetype;
					portInfo.portIndex = 1;
					// ---------------- 第二个端口信息显示在配线管理widget上 -----------------------
					AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
					//管理图联动
					diaMngLink(1,secondPort.code,targetEqmt.uNo,portStatusInfo.status);
				} else {
					targetPortCode = obj.portCode;
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					targetShow = true;
					targetIsDouble = true;
					
				}
			}
			
			/**
			 * 配线单（工作单）联动
			 */ 
			public function showTargetPortX(obj:Object):void {
				targetEqmt = _eqmtList[obj.uNo];
				targetEqmt.showArrow();
				if (targetEqmt.portList != null) {
					// ------------ 通过端口序号，找到端口 ----------
					secondPortX = targetEqmt.getPortViewByCode(obj.portCode);
					targetEqmt.setElementIndex(secondPortX,targetEqmt.numElements - 1);
					animate.target = secondPortX;
					animate.stop();
					animate.play();
					//管理图联动
					diaMngLink(1,secondPortX.code,targetEqmt.uNo,secondPortX.status);
				} else {
					targetPortCode = obj.portCode;
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					targetShowX = true;
					targetIsDouble = true;
				}
			}
			
			public function showAlarmPort(obj:Object):void {
				targetEqmt = _eqmtList[obj.uNo];
				targetEqmt.showArrow();
				targetEqmt.startAlarm();
				// ---------------- 前一个告警灯停止闪烁 ------------------
				if (lamp) {
					lamp.stopAlarm();
				}
				if (targetEqmt.portList != null) {
					lamp = targetEqmt.getAlarmLampByCode(obj.portCode);
					lamp.startAlarm();
					AppEvent.dispatch(EventType.ALARM_CABINET_MNG,obj);
				} else {
					targetPortCode = obj.portCode;
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
					alarmShow = true;
				}
				AppEvent.dispatch(EventType.CABINET_SWITCH,0);
				
			}
			/**
			 * 点击端口
			 * @param event 机柜事件
			 * @return void
			 */ 
			private function portClick(event:CabinetEvent):void {
				if (!continueable) {
					return;
				}
				var portView:PortView = event.portView;
				// ---------------- 配线工具选择【查询】 ----------
				if (wiringType == "info") {
					AppEvent.dispatch(EventType.DOUBLE_CABINET_CLEAR);
					if(selectedEqmt)selectedEqmt.hiddeArrow();
					selectedEqmt = event.equipment;		
					selectedEqmt.setElementIndex(portView,selectedEqmt.numElements - 1);
					selectedEqmt.showArrow();
					animate.target = portView;
					animate.stop();
					animate.play();
					portStatusInfo.status = null;
					portStatusInfo.cabinetIndex = cabinetIndex;
					portStatusInfo.uNo = event.equipment.uNo;
					portStatusInfo.portCode = portView.code;
					portStatusInfo.portIndex = 0;
					AppEvent.dispatch(EventType.CABINET_SWITCH,cabinetIndex);
					AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					if (showChain && portView.status == 1) {
						var obj : Object = new Object();
						obj.portId = portView.id;
						//端口连接到链路 
						obj.type = 0; 
						AppEvent.dispatch(AppEvent.WIDGET_RUN,4);
						setTimeout(function():void{AppEvent.dispatch(EventType.CHAIN_SHOW,obj);},500);
					}
				}
				// ---------------- 配线工具选择【关联】 ----------
				if (wiringType == "link") {
					if (portView.status == 1) {
						// -------- 清除上一次查询 ---------------
						AppEvent.dispatch(EventType.DOUBLE_CABINET_CLEAR);
						showTarget(portView,event.equipment);
					}
				}
				// ---------------- 配线工具选择【增加】 ----------
				if (wiringType == "add") {
					if (portView.status == 0) {
						wiring(portView,event.equipment);
					}
				} 
				// ---------------- 配线工具选择【删除】----------
				if (wiringType == "remove" || wiringType=="change") {
					if (portView.status == 1) {
						showTarget(portView,event.equipment);
					}
				}
				// ---------------- 配线工具选择【变更】 ----------
				if (wiringType == "modify") {
					if (portView.status == 1 && firstSelect) {
						showTarget(portView,event.equipment);
						firstSelect = false;
					} else if (portView.status == 0 && !firstSelect) {
						modify(portView,event.equipment);
					}
				}
				// ---------------- 配线工具选择【自动】 ----------
				if (wiringType == "auto") {
					if (portView.status == 0 && event.equipment.type == 0 && event.equipment.shelfType == 1) {
						autoWiring(portView,event.equipment);
					}
				}
			}
			
			/**
			 * 点击设备、配线架，获得它的所有端口信息
			 * @param event 机柜事件
			 * @return void
			 */ 
			private function equipmentClick(event:CabinetEvent):void {
				var eqmt:Equipment = event.equipment;
				if (selectedEqmt)selectedEqmt.hiddeArrow();
				selectedEqmt = eqmt;
				if (eqmt.portList == null){
					remote.getCabinetShowPortList(eqmt.eqmtId,eqmt.type);
				}
			}
			
			/**
			 * 添加配线操作
			 * @param port 端口
			 * @param eqmt 配线架设备
			 * @return void
			 */ 
			private function wiring(port:PortView,eqmt:Equipment):void {
				// ---------------- 跨机柜配线 --------------
				if (doubleCabinet) {
					if (firstSelect) {
						if (selectedEqmt)selectedEqmt.hiddeArrow();
						selectedEqmt = eqmt;
						selectedEqmt.showArrow();
						selectedEqmt.setElementIndex(port,selectedEqmt.numElements - 1);
						animate.target = port;
						animate.play();
						portStatusInfo.cabinetIndex = cabinetIndex ;
						portStatusInfo.uNo = eqmt.uNo;
						portStatusInfo.status = 3;
						portStatusInfo.portIndex = 0;
						portStatusInfo.portCode = port.code;
						AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
					} else {
//						Alert.show("请选择另外一个机柜上的端口");
						Alert.show(ResourceManager.getInstance().getString("ViewerStrings","I00004"));
						portStatusInfo.portIndex = -1;
						return;	
					}
				}
				if (firstSelect) {
					firstPort = port;
					firstPort.status = 3;
					// ------------ 下次选的端口不是起始端口 ----------
					firstSelect = false;
					portStatusInfo.cabinetIndex = cabinetIndex;
					portStatusInfo.uNo = eqmt.uNo;
					portStatusInfo.portCode = firstPort.code;
					portStatusInfo.status = 3;
					portStatusInfo.portIndex = 0;
					AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
				} else {
					secondPort = port;
					// ------------ 端口类型是否相同（光、铜） ----------
					if (firstPort.linetype != secondPort.linetype) {
						portStatusInfo.portIndex = -1;
						return;
					}
					if (firstPort.parentType == '1' && secondPort.parentType == '1'){
						portStatusInfo.portIndex = -1;
						return ;
					}
					// ------------ 创建线缆 ----------
					var cable:Cable = new Cable(new Point(firstPort.x + firstPort.parent.x + firstPort.width/2,firstPort.y
						+firstPort.parent.y+firstPort.height/2-firstPort.reverse*firstPort.height),new Point(secondPort.x+secondPort.parent.x+secondPort.width/2,secondPort.y + 
							secondPort.parent.y + secondPort.height/2 - secondPort.reverse*secondPort.height));
					cableGroup.addElement(cable);
					currentCable = cable;
					secondPort.status = 3;
					portStatusInfo.status = 3;
					portStatusInfo.portIndex = 1;
					// ------------ 下次选的端口是起始端口 ----------
					firstSelect = true;
					// ------------ 当前配线创建完成，需确认才能继续配线 ----------
					continueable = false;
					
					portStatusInfo.uNo = eqmt.uNo;
					portStatusInfo.portCode = secondPort.code;
					portStatusInfo.portIndex = 1;
					AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
				}
				// ---------------- 端口选择后，端口信息显示在配线管理widget里 --------------
				portInfo = new Object();
				portInfo.id = int(port.id);
				portInfo.cabinetCode = cabinetInfo.code;
				portInfo.uNo = eqmt.uNo;
				portInfo.portCode = port.code;
				portInfo.infoCode = port.infoCode;
				portInfo.portIndex = firstSelect?1:0;
				portInfo.linetype = port.linetype;
				portInfo.doubleCabinet = doubleCabinet ? "double" : null;
				AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
			}
			
			/**
			 * 显示目标端口
			 * @param port 端口
			 * @param eqmt 配线架设备
			 * @return void
			 */ 
			private function showTarget(port:PortView,eqmt:Equipment):void {
				selectedEqmt = eqmt;
				firstPort = port;
				eqmt.setElementIndex(firstPort,eqmt.numElements - 1);
				portInfo = new Object();
				portInfo.id = int(port.id);
				portInfo.cabinetCode = cabinetInfo.code;
				portInfo.uNo = eqmt.uNo;
				portInfo.portCode = port.code;
				portInfo.infoCode = port.infoCode;
				portInfo.linetype = port.linetype;
				portInfo.portIndex = 0;
				AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
				
				portStatusInfo.cabinetIndex = cabinetIndex;
				portStatusInfo.uNo = eqmt.uNo;
				portStatusInfo.portCode = port.code;
				portStatusInfo.portIndex = 0;
				
				// ---------------- 获得目标端口 -----------------------
				remote.getTagetPortInfo(int(firstPort.id));
			}
			
			/**
			 * 显示在同一个机柜的线缆
			 */ 
			public function showCable(obj:Object):void {
				AppEvent.dispatch(EventType.ADDCABLE_CANCEL);
				showCableObj = obj;
				loadDouble = true;
				loadIndex = 0;
				targetEqmt = _eqmtList[obj.uNo1];
				if (targetEqmt.portList) {
					firstPortX = targetEqmt.getPortViewByCode(obj.portCode1);
					diaMngLink(0,firstPortX.code,targetEqmt.uNo,firstPortX.status);
					loadIndex ++;
				} 
				targetEqmt = _eqmtList[obj.uNo2];
				if (targetEqmt.portList) {
					secondPortX = targetEqmt.getPortViewByCode(obj.portCode2);
					diaMngLink(1,secondPortX.code,targetEqmt.uNo,secondPortX.status);
					loadIndex += 2;
				} 
				if (loadIndex == 3) {
					var cable:Cable = new Cable(new Point(firstPortX.x + firstPortX.parent.x + firstPortX.width/2,firstPortX.y
						+firstPortX.parent.y+firstPortX.height/2-firstPortX.reverse*firstPortX.height),new Point(secondPortX.x+secondPortX.parent.x+secondPortX.width/2,secondPortX.y + 
							secondPortX.parent.y + secondPortX.height/2 - secondPortX.reverse*secondPortX.height));
					cableGroup.addElement(cable);
					currentCable = cable;
					loadDouble = false;
				} else if (loadIndex == 0 || loadIndex == 2) {
					targetEqmt = _eqmtList[obj.uNo1];
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
				} else if (loadIndex == 1) {
					targetEqmt = _eqmtList[obj.uNo2];
					remote.getCabinetShowPortList(targetEqmt.eqmtId,targetEqmt.type);
				}
			}
			
			/**
			 * 变更操作
			 * @param port 端口
			 * @param eqmt 配线架设备
			 * @return void
			 */ 
			private function modify(port:PortView,eqmt:Equipment):void { 
				//firstPort不变（4),临时端口（3）,secondPort(1);
				if (targetIsDouble) {
					secondPort = port;
					secondPort.status = 3;
				} else {
					var tmpPort:PortView;
					port.status = 3;
					tmpPort = firstPort;
					firstPort = port;
					secondPort.status = 1;
					cableGroup.removeElement(currentCable);
					
					// ---------------- 创建线缆 ----------
					var cable:Cable = new Cable(new Point(firstPort.x + firstPort.parent.x + firstPort.width/2,firstPort.y
						+firstPort.parent.y+firstPort.height/2-firstPort.reverse*firstPort.height),new Point(secondPort.x+secondPort.parent.x+secondPort.width/2,secondPort.y + 
							secondPort.parent.y + secondPort.height/2 - secondPort.reverse*secondPort.height));
					cableGroup.addElement(cable);
					currentCable = cable;
					// ---------------- 端口变换 ----------
					firstPort = tmpPort;
					secondPort = port;
				}
				portStatusInfo.cabinetIndex = cabinetIndex;
				portStatusInfo.portCode = port.code ;
				portStatusInfo.uNo = eqmt.uNo;
				portStatusInfo.portIndex = 1;
				portStatusInfo.status = 3;
				AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
				// ---------------- 下次选的端口是起始端口 ----------
				firstSelect = true;
				// ---------------- 当前配线创建完成，需确认才能继续配线 ----------
				continueable = false;
				portInfo = new Object();
				portInfo.id = int(port.id);
				portInfo.cabinetCode = cabinetInfo.code;
				portInfo.uNo = eqmt.uNo;
				portInfo.portCode = port.code;
				portInfo.infoCode = port.infoCode;
				portInfo.portIndex = 1;
				portInfo.linetype = port.linetype;
				AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
			}
			
			private function autoWiring(port:PortView,eqmt:Equipment):void {
				port.status = 3;
				firstPort = port;
				portInfo = new Object();
				portInfo.id = int(port.id);
				portInfo.cabinetCode = cabinetInfo.code;
				portInfo.uNo = eqmt.uNo;
				portInfo.portCode = port.code;
				portInfo.infoCode = port.infoCode;
				portInfo.linetype = port.linetype;
				portInfo.portIndex = 0;
				AppEvent.dispatch(EventType.PORT_SELECT,portInfo);
				
				portStatusInfo.cabinetIndex = cabinetIndex;
				portStatusInfo.uNo = eqmt.uNo;
				portStatusInfo.portCode = port.code;
				portStatusInfo.portIndex = 0;
				portStatusInfo.status = 3;
				AppEvent.dispatch(EventType.DIA_MNG_FIND,portStatusInfo);
				continueable = false;
			}
			
			private function onFault(event:FaultEvent):void {
				var str : String = event.fault.faultString;
				if(str == 'LoginSecDogNotFound' || str == 'FilterSecDogNotFound'){
//					Alert.show("请插入加密狗！","提示");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00002"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
				}else if(str == 'NoAuth'){
//					Alert.show("没有权限！","提示");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00003"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
				}else if(str == 'SessionTimeOut'){
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00004"),ResourceManager.getInstance().getString("ViewerStrings","T00001"),Alert.OK,null,function(event : CloseEvent):void{
						AppEvent.dispatch(EventType.USER_LOGOUT,'logout');
					});
				}else if (str == 'dataVersionError'){
//					Alert.show("操作失败！","提示");
					Alert.show(ResourceManager.getInstance().getString("ViewerStrings","E00005"),ResourceManager.getInstance().getString("ViewerStrings","T00001"));
				}else{
					Alert.show(event.fault.message);
				}
			}
			
			private function isCabinetWarningResult(event:ResultEvent):void{
				var flag : Boolean = event.result as Boolean;
				if(flag){
					alarmLamp.visible = true;
				}else{
					alarmLamp.visible = false;
				}
			}
			
		]]>
	</fx:Script>
	<s:Group id="cabinetGroup" width="100%" height="100%" />
	<s:Group id="cableGroup" width="100%" height="100%" />
</s:Group>
